"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.3.
For full settings, see https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Load .env variables
load_dotenv()

# Paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-dt1#i48=k*oc^@cwtgj7v1ou(_(n%z=&omp$)fhfh3d)hvv^sg')
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',') + [
    '.railway.app',
    'web-production-158c.up.railway.app'
]

# Detect if running on Railway
IS_RAILWAY = os.getenv("RAILWAY_ENVIRONMENT_NAME") is not None
USE_PROD_DB = os.environ.get('USE_PROD_DB', 'false').lower() == 'true'

# Database: PostgreSQL on Railway or local SQLite
if IS_RAILWAY or USE_PROD_DB:
    raw_db_url = os.environ.get("DATABASE_URL", "")
    if raw_db_url.startswith("postgres://"):
        raw_db_url = raw_db_url.replace("postgres://", "postgresql://", 1)

    try:
        DATABASES = {
            'default': dj_database_url.parse(
                raw_db_url,
                conn_max_age=300,  # Reduced from 600 for memory efficiency
                ssl_require=True,
                # Memory optimization settings
                options={
                    'MAX_CONNS': 10,  # Limit connection pool
                    'MIN_CONNS': 1,
                }
            )
        }
    except Exception as e:
        print("‚ùå DATABASE ERROR:", e)
        raise e
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Memory optimization: Database connection pooling
if IS_RAILWAY:
    DATABASES['default']['CONN_MAX_AGE'] = 300
    DATABASES['default']['OPTIONS'] = {
        'MAX_CONNS': 10,
        'MIN_CONNS': 1,
    }

# Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'imagekit',
    'rest_framework',
    'corsheaders',
    'core',
]

# Middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# URL config
ROOT_URLCONF = 'backend.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI
WSGI_APPLICATION = 'backend.wsgi.application'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files with memory optimization
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Memory optimization: Use simpler static file storage
if IS_RAILWAY:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
else:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default PK
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS
CORS_ALLOW_ALL_ORIGINS = True

# Memory optimization: Session settings
if IS_RAILWAY:
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
    SESSION_COOKIE_AGE = 3600  # 1 hour
    SESSION_SAVE_EVERY_REQUEST = False

# Memory optimization: Cache settings (simple in-memory cache)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Memory optimization: Logging (reduce verbosity)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ImageKit settings
IMAGEKIT_CONFIG = {
    'PUBLIC_KEY': os.environ.get('IMAGEKIT_PUBLIC_KEY'),
    'PRIVATE_KEY': os.environ.get('IMAGEKIT_PRIVATE_KEY'),
    'URL_ENDPOINT': os.environ.get('IMAGEKIT_URL_ENDPOINT'),
}

# File storage (ImageKit if configured, fallback to local)
try:
    if all(IMAGEKIT_CONFIG.values()):
        print("üñºÔ∏è Using ImageKit for storage")
        DEFAULT_FILE_STORAGE = 'core.storage.ImageKitStorage'
    else:
        print("‚öôÔ∏è Using local storage (ImageKit keys missing)")
        DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
except Exception as e:
    print(f"‚ö†Ô∏è Error checking storage config: {e}")
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# CSRF Trusted Origins
CSRF_TRUSTED_ORIGINS = [
    "https://web-production-158c.up.railway.app",
    "https://*.up.railway.app",
    "https://*.railway.app",
]

# Memory optimization: REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Limit page size
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    }
}
